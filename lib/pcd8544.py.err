#!/usr/bin/env python2
# -*- encoding: utf-8 -*-
"""
Modulo: 
"""
__author__ = 'Sergio Cioban Filho'
__version__ = '1.0'
__date__ = '22/05/2013 11:23:45 AM'


import time
import RPi.GPIO as GPIO


from os.path import exists
import pickle

class PCD8544:

    lcd_cfg = {
        'contrast': 0xB8,
        'backlight': 0xFF,
    }
    ROWS = 6
    COLUMNS = 14
    PIXELS_PER_ROW = 6

    #gpio's :
    SCE = 21 # gpio pin 13 = wiringpi no. 2
    SCLK = 24 # gpio pin 18 = wiringpi no. 5
    DIN = 23 # gpio pin 16 = wiringpi no. 4
    DC = 22 # gpio pin 15 = wiringpi no. 3
    RST = 17 # gpio pin 11 = wiringpi no. 0
    LED = 18 # gpio pin 12 = wiringpi no. 1

    pi_logo = [
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xF8, 0xFC, 0xAE, 0x0E,
        0x0E, 0x06, 0x0E, 0x06,
        0xCE, 0x86, 0x8E, 0x0E, 0x0E, 0x1C, 0xB8, 0xF0, 0xF8, 0x78, 0x38, 0x1E,
        0x0E, 0x8E, 0x8E, 0xC6,
        0x0E, 0x06, 0x0E, 0x06, 0x0E, 0x9E, 0xFE, 0xFC, 0xF8, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x03, 0x0F, 0x0F, 0xFE,
        0xF8, 0xF0, 0x60, 0x60, 0xE0, 0xE1, 0xE3, 0xF7, 0x7E, 0x3E, 0x1E, 0x1F,
        0x1F, 0x1F, 0x3E, 0x7E,
        0xFB, 0xF3, 0xE1, 0xE0, 0x60, 0x70, 0xF0, 0xF8, 0xBE, 0x1F, 0x0F, 0x07,
        0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x80, 0xC0,
        0xE0, 0xFC, 0xFE, 0xFF, 0xF3, 0x38, 0x38, 0x0C, 0x0E, 0x0F, 0x0F, 0x0F,
        0x0E, 0x3C, 0x38, 0xF8,
        0xF8, 0x38, 0x3C, 0x0E, 0x0F, 0x0F, 0x0F, 0x0E, 0x0C, 0x38, 0x38, 0xF3,
        0xFF, 0xFF, 0xF8, 0xE0,
        0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00,
        0x00, 0x7F, 0xFF, 0xE7, 0xC3, 0xC1, 0xE0, 0xFF, 0xFF, 0x78, 0xE0, 0xC0,
        0xC0, 0xC0, 0xC0, 0xE0,
        0x60, 0x78, 0x38, 0x3F, 0x3F, 0x38, 0x38, 0x60, 0x60, 0xC0, 0xC0, 0xC0,
        0xC0, 0xE0, 0xF8, 0x7F,
        0xFF, 0xE0, 0xC1, 0xC3, 0xE7, 0x7F, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0F, 0x7F, 0xFF, 0xF1,
        0xE0, 0xC0, 0x80, 0x01,
        0x03, 0x9F, 0xFF, 0xF0, 0xE0, 0xE0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xE0,
        0xE0, 0xF0, 0xFF, 0x9F,
        0x03, 0x01, 0x80, 0xC0, 0xE0, 0xF1, 0x7F, 0x1F, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x01,
        0x03, 0x03, 0x07, 0x07, 0x0F, 0x1F, 0x1F, 0x3F, 0x3B, 0x71, 0x60, 0x60,
        0x60, 0x60, 0x60, 0x71,
        0x3B, 0x1F, 0x0F, 0x0F, 0x0F, 0x07, 0x03, 0x03, 0x01, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    ]

    FONT = {
        ' ': [0x00, 0x00, 0x00, 0x00, 0x00],
        '!': [0x00, 0x00, 0x5f, 0x00, 0x00],
        '"': [0x00, 0x07, 0x00, 0x07, 0x00],
        '#': [0x14, 0x7f, 0x14, 0x7f, 0x14],
        '$': [0x24, 0x2a, 0x7f, 0x2a, 0x12],
        '%': [0x23, 0x13, 0x08, 0x64, 0x62],
        '&': [0x36, 0x49, 0x55, 0x22, 0x50],
        "'": [0x00, 0x05, 0x03, 0x00, 0x00],
        '(': [0x00, 0x1c, 0x22, 0x41, 0x00],
        ')': [0x00, 0x41, 0x22, 0x1c, 0x00],
        '*': [0x14, 0x08, 0x3e, 0x08, 0x14],
        '+': [0x08, 0x08, 0x3e, 0x08, 0x08],
        ',': [0x00, 0x50, 0x30, 0x00, 0x00],
        '-': [0x08, 0x08, 0x08, 0x08, 0x08],
        '.': [0x00, 0x60, 0x60, 0x00, 0x00],
        '/': [0x20, 0x10, 0x08, 0x04, 0x02],
        '0': [0x3e, 0x51, 0x49, 0x45, 0x3e],
        '1': [0x00, 0x42, 0x7f, 0x40, 0x00],
        '2': [0x42, 0x61, 0x51, 0x49, 0x46],
        '3': [0x21, 0x41, 0x45, 0x4b, 0x31],
        '4': [0x18, 0x14, 0x12, 0x7f, 0x10],
        '5': [0x27, 0x45, 0x45, 0x45, 0x39],
        '6': [0x3c, 0x4a, 0x49, 0x49, 0x30],
        '7': [0x01, 0x71, 0x09, 0x05, 0x03],
        '8': [0x36, 0x49, 0x49, 0x49, 0x36],
        '9': [0x06, 0x49, 0x49, 0x29, 0x1e],
        ':': [0x00, 0x36, 0x36, 0x00, 0x00],
        ';': [0x00, 0x56, 0x36, 0x00, 0x00],
        '<': [0x08, 0x14, 0x22, 0x41, 0x00],
        '=': [0x14, 0x14, 0x14, 0x14, 0x14],
        '>': [0x00, 0x41, 0x22, 0x14, 0x08],
        '?': [0x02, 0x01, 0x51, 0x09, 0x06],
        '@': [0x32, 0x49, 0x79, 0x41, 0x3e],
        'A': [0x7e, 0x11, 0x11, 0x11, 0x7e],
        'B': [0x7f, 0x49, 0x49, 0x49, 0x36],
        'C': [0x3e, 0x41, 0x41, 0x41, 0x22],
        'D': [0x7f, 0x41, 0x41, 0x22, 0x1c],
        'E': [0x7f, 0x49, 0x49, 0x49, 0x41],
        'F': [0x7f, 0x09, 0x09, 0x09, 0x01],
        'G': [0x3e, 0x41, 0x49, 0x49, 0x7a],
        'H': [0x7f, 0x08, 0x08, 0x08, 0x7f],
        'I': [0x00, 0x41, 0x7f, 0x41, 0x00],
        'J': [0x20, 0x40, 0x41, 0x3f, 0x01],
        'K': [0x7f, 0x08, 0x14, 0x22, 0x41],
        'L': [0x7f, 0x40, 0x40, 0x40, 0x40],
        'M': [0x7f, 0x02, 0x0c, 0x02, 0x7f],
        'N': [0x7f, 0x04, 0x08, 0x10, 0x7f],
        'O': [0x3e, 0x41, 0x41, 0x41, 0x3e],
        'P': [0x7f, 0x09, 0x09, 0x09, 0x06],
        'Q': [0x3e, 0x41, 0x51, 0x21, 0x5e],
        'R': [0x7f, 0x09, 0x19, 0x29, 0x46],
        'S': [0x46, 0x49, 0x49, 0x49, 0x31],
        'T': [0x01, 0x01, 0x7f, 0x01, 0x01],
        'U': [0x3f, 0x40, 0x40, 0x40, 0x3f],
        'V': [0x1f, 0x20, 0x40, 0x20, 0x1f],
        'W': [0x3f, 0x40, 0x38, 0x40, 0x3f],
        'X': [0x63, 0x14, 0x08, 0x14, 0x63],
        'Y': [0x07, 0x08, 0x70, 0x08, 0x07],
        'Z': [0x61, 0x51, 0x49, 0x45, 0x43],
        '[': [0x00, 0x7f, 0x41, 0x41, 0x00],
        '\\': [0x02, 0x04, 0x08, 0x10, 0x20],
        ']': [0x00, 0x41, 0x41, 0x7f, 0x00],
        '^': [0x04, 0x02, 0x01, 0x02, 0x04],
        '_': [0x40, 0x40, 0x40, 0x40, 0x40],
        '`': [0x00, 0x01, 0x02, 0x04, 0x00],
        'a': [0x20, 0x54, 0x54, 0x54, 0x78],
        'b': [0x7f, 0x48, 0x44, 0x44, 0x38],
        'c': [0x38, 0x44, 0x44, 0x44, 0x20],
        'd': [0x38, 0x44, 0x44, 0x48, 0x7f],
        'e': [0x38, 0x54, 0x54, 0x54, 0x18],
        'f': [0x08, 0x7e, 0x09, 0x01, 0x02],
        'g': [0x0c, 0x52, 0x52, 0x52, 0x3e],
        'h': [0x7f, 0x08, 0x04, 0x04, 0x78],
        'i': [0x00, 0x44, 0x7d, 0x40, 0x00],
        'j': [0x20, 0x40, 0x44, 0x3d, 0x00],
        'k': [0x7f, 0x10, 0x28, 0x44, 0x00],
        'l': [0x00, 0x41, 0x7f, 0x40, 0x00],
        'm': [0x7c, 0x04, 0x18, 0x04, 0x78],
        'n': [0x7c, 0x08, 0x04, 0x04, 0x78],
        'o': [0x38, 0x44, 0x44, 0x44, 0x38],
        'p': [0x7c, 0x14, 0x14, 0x14, 0x08],
        'q': [0x08, 0x14, 0x14, 0x18, 0x7c],
        'r': [0x7c, 0x08, 0x04, 0x04, 0x08],
        's': [0x48, 0x54, 0x54, 0x54, 0x20],
        't': [0x04, 0x3f, 0x44, 0x40, 0x20],
        'u': [0x3c, 0x40, 0x40, 0x20, 0x7c],
        'v': [0x1c, 0x20, 0x40, 0x20, 0x1c],
        'w': [0x3c, 0x40, 0x30, 0x40, 0x3c],
        'x': [0x44, 0x28, 0x10, 0x28, 0x44],
        'y': [0x0c, 0x50, 0x50, 0x50, 0x3c],
        'z': [0x44, 0x64, 0x54, 0x4c, 0x44],
        '{': [0x00, 0x08, 0x36, 0x41, 0x00],
        '|': [0x00, 0x00, 0x7f, 0x00, 0x00],
        '}': [0x00, 0x41, 0x36, 0x08, 0x00],
        '~': [0x10, 0x08, 0x08, 0x10, 0x08],
        '\x7f': [0x00, 0x7e, 0x42, 0x42, 0x7e],
    }

    ORIGINAL_CUSTOM = FONT['\x7f']

    LCD_CFG_FILE="/tmp/lcd.cfg"

    def __init__(self, invert=False):
        if not exists(self.LCD_CFG_FILE):
            self.save_lcd_cfg()
        else:
            dict_file_fd = open(self.LCD_CFG_FILE, 'rb')
            self.lcd_cfg = pickle.load(dict_file_fd)
            dict_file_fd.close()
        self.setup_gpio()
        self.set_display_mode(invert=invert)
        #self.cls()

    def save_lcd_cfg(self):
        dict_file_fd = open(self.LCD_CFG_FILE, 'wb')
        pickle.dump(self.lcd_cfg, dict_file_fd)
        dict_file_fd.close()

    def setup_gpio(self):
        GPIO.setwarnings(False)
        GPIO.setmode(GPIO.BCM)

        # outputs :
        for pin in [self.DIN, self.SCLK, self.DC, self.RST, self.SCE]:
            GPIO.setup(pin, GPIO.OUT, initial=GPIO.LOW)

        GPIO.setup(self.LED, GPIO.OUT, initial=GPIO.HIGH)

    def stop_data(self):
        GPIO.output(self.SCE, GPIO.LOW)
        GPIO.output(self.RST, GPIO.LOW)
        #time.sleep(1/1000000.0)
        GPIO.output(self.RST, GPIO.HIGH)

    def set_display_mode(self, invert=False):
        # Toggle RST low to reset.
        GPIO.output(self.SCE, GPIO.LOW)
        GPIO.output(self.RST, GPIO.LOW)
        #time.sleep(1/1000000.0)
        GPIO.output(self.RST, GPIO.HIGH)
        if invert is True:
            # Extended mode, bias, vop, basic mode, inverted display.
            for value in [0x21, 0x14, self.lcd_cfg['contrast'], 0x20, 0x0d]:
                self.lcd_cmd(value) # extended mode
        else:
            # Extended mode, bias, vop, basic mode, non-inverted display.
            for value in [0x21, 0x14, self.lcd_cfg['contrast'], 0x20, 0x0c]:
                self.lcd_cmd(value) # extended mode

    def SPI(self, value):
        # data = DIN
        # clock = SCLK
        # MSB first
        for i in reversed(xrange(8)):
            GPIO.output(self.DIN, ((value >> i) & 1))
            GPIO.output(self.SCLK, GPIO.HIGH)
            GPIO.output(self.SCLK, GPIO.LOW)

    def lcd_cmd(self, value):
        GPIO.output(self.DC, GPIO.LOW)
        time.sleep(1/1000000.0)
        self.SPI(value)

    def lcd_data(self, value):
        GPIO.output(self.DC,GPIO.HIGH)
        self.SPI(value)

    def gotoxy(self, x, y):
        self.lcd_cmd(x + 128)
        self.lcd_cmd(y + 64)

    def cls(self):
        self.gotoxy(0, 0)
        for _ in xrange(self.ROWS * self.COLUMNS * self.PIXELS_PER_ROW):
            self.lcd_data(0)

    def write_logo(self):
        self.gotoxy(0,0)
        for BYTE in self.pi_logo:
                self.lcd_data(BYTE)

    def show_custom(self, font=FONT):
        self.display_char('\x7f', font)

    def define_custom(self, values):
        self.FONT['\x7f'] = values

    def restore_custom(self):
        self.define_custom(self.ORIGINAL_CUSTOM)

    def alt_custom(self):
        self.define_custom([0x00, 0x50, 0x3C, 0x52, 0x44])

    def pi_custom(self):
        self.define_custom([0x19, 0x25, 0x5A, 0x25, 0x19])

    def display_char(self, char, font=FONT):
        try:
            for value in font[char]:
                self.lcd_data(value)

            self.lcd_data(0) # Space inbetween characters.
        except KeyError:
            pass # Ignore undefined characters.

    def text(self, string, font=FONT):
        for char in string:
            self.display_char(char, font)

    def gotorc(self, r, c):
        self.lcd_cmd(c * 6 + 128)
        self.lcd_cmd(r + 64)

    def centre_word(self, r, word):
        self.gotorc(r, max(0, (self.COLUMNS - len(word)) // 2))
        self.text(word)

    def show_text(self):
        self.centre_word(1,"netPi")
        self.centre_word(2,": ready :")

    def show_logo(self):
        self.write_logo()


    def blink_logo(self, times):
        self.write_logo()
        blink_time = 0.3
        invert_value = True
        for _ in range(times):
            self.set_display_mode(invert=invert_value)
            invert_value ^= True
            time.sleep(blink_time)

        self.set_display_mode(invert=False)

if __name__ == '__main__':
    #from pcd8544_fonts import Liberation_Sans11x14_Numbers
    lcd = PCD8544()
    #show_text()
    #show_logo()
    #time.sleep(3)
    #lcd.blink_logo(5)
    #lcd.centre_word(0,"TEST")
    #lcd.gotoxy(0,0)
    #lcd.text('123', Liberation_Sans11x14_Numbers)

